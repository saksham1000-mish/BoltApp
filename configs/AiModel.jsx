const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  const CodegenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });
    export const GenAiCode=model.startChat({
      generationConfig: CodegenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "create todo app:Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"React Todo App with Tailwind CSS\",\n  \"explanation\": \"This project is a React-based todo application styled with Tailwind CSS. It allows users to add, delete, and mark tasks as complete. The application is structured into several components for better organization and maintainability. It includes features for date formatting using `date-fns`, displaying simple charts with `react-chartjs-2`, using lucide-react for icons, providing a visually appealing and user-friendly interface.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { format } from 'date-fns';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\\nimport { Bar } from 'react-chartjs-2';\\nimport { Plus, Trash, Check, Edit } from 'lucide-react';\\nimport TodoList from './components/TodoList';\\nimport TodoForm from './components/TodoForm';\\n\\nChartJS.register(\\n  CategoryScale,\\n  LinearScale,\\n  BarElement,\\n  Title,\\n  Tooltip,\\n  Legend\\n);\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    if (savedTodos) {\\n      return JSON.parse(savedTodos);\\n    } else {\\n      return [];\\n    }\\n  });\\n  const [filter, setFilter] = useState('all');\\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (text) => {\\n    const newTodo = { id: Date.now(), text, completed: false, createdAt: new Date() };\\n    setTodos([...todos, newTodo]);\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter((todo) => todo.id !== id));\\n  };\\n\\n  const completeTodo = (id) => {\\n    setTodos(\\n      todos.map((todo) =>\\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n      )\\n    );\\n  };\\n  const editTodo = (id, newText) => {\\n    setTodos(\\n      todos.map((todo) =>\\n        todo.id === id ? { ...todo, text: newText } : todo\\n      )\\n    );\\n  };\\n\\n  const filteredTodos = () => {\\n    switch (filter) {\\n      case 'completed':\\n        return todos.filter((todo) => todo.completed);\\n      case 'active':\\n        return todos.filter((todo) => !todo.completed);\\n      default:\\n        return todos;\\n    }\\n  };\\n  const data = {\\n    labels: ['Total', 'Completed', 'Pending'],\\n    datasets: [\\n      {\\n        label: 'Tasks',\\n        data: [todos.length, todos.filter(todo => todo.completed).length, todos.filter(todo => !todo.completed).length],\\n        backgroundColor: [\\n          'rgba(255, 99, 132, 0.2)',\\n          'rgba(75, 192, 192, 0.2)',\\n          'rgba(54, 162, 235, 0.2)',\\n        ],\\n        borderColor: [\\n          'rgba(255, 99, 132, 1)',\\n          'rgba(75, 192, 192, 1)',\\n          'rgba(54, 162, 235, 1)',\\n        ],\\n        borderWidth: 1,\\n      },\\n    ],\\n  };\\n\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen py-10\\\">\\n      <div className=\\\"container mx-auto p-4 bg-white shadow-md rounded-lg\\\">\\n        <h1 className=\\\"text-3xl font-semibold text-center text-gray-800 mb-6\\\">üìù My Todo App</h1>\\n        <TodoForm addTodo={addTodo} />\\n\\n        <div className=\\\"flex space-x-4 mb-4\\\">\\n          <button onClick={() => setFilter('all')} className=\\\"px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\\\">All</button>\\n          <button onClick={() => setFilter('active')} className=\\\"px-4 py-2 rounded-md bg-green-500 text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50\\\">Active</button>\\n          <button onClick={() => setFilter('completed')} className=\\\"px-4 py-2 rounded-md bg-purple-500 text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50\\\">Completed</button>\\n        </div>\\n\\n        <TodoList todos={filteredTodos()} deleteTodo={deleteTodo} completeTodo={completeTodo} editTodo={editTodo} />\\n\\n        <div className='w-full max-w-md mx-auto mt-8'>\\n          <h2 className=\\\"text-xl font-semibold text-center text-gray-800 mb-4\\\">üìä Task Overview</h2>\\n          <Bar data={data} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\n      \"test\": \"\"\n    },\n    \"/components/TodoItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Check, Edit } from 'lucide-react';\\n\\nfunction TodoItem({ todo, deleteTodo, completeTodo, editTodo }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n\\n  const handleEdit = () => {\\n    editTodo(todo.id, editText);\\n    setIsEditing(false);\\n  };\\n\\n  return (\\n    <li className=\\\"flex items-center justify-between py-2 px-4 border-b border-gray-200 last:border-none\\\">\\n      {isEditing ? (\\n        <input\\n          type=\\\"text\\\"\\n          value={editText}\\n          onChange={(e) => setEditText(e.target.value)}\\n          onBlur={handleEdit}\\n          className=\\\"flex-grow mr-2 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n        />\\n      ) : (\\n        <span className={`${todo.completed ? 'line-through text-gray-500' : 'text-gray-800'} flex-grow`}>\\n          {todo.text}\\n        </span>\\n      )}\\n      <div>\\n        <button onClick={() => completeTodo(todo.id)} className=\\\"px-3 py-1 rounded-md bg-green-500 text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 mr-2\\\">\\n          <Check className=\\\"h-4 w-4\\\" />\\n        </button>\\n        <button onClick={() => setIsEditing(true)} className=\\\"px-3 py-1 rounded-md bg-blue-500 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 mr-2\\\">\\n          <Edit className=\\\"h-4 w-4\\\" />\\n        </button>\\n        <button onClick={() => deleteTodo(todo.id)} className=\\\"px-3 py-1 rounded-md bg-red-500 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50\\\">\\n          <Trash className=\\\"h-4 w-4\\\" />\\n        </button>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\\n\",\n      \"test\": \"\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoItem from './TodoItem';\\n\\nfunction TodoList({ todos, deleteTodo, completeTodo, editTodo }) {\\n  return (\\n    <ul>\\n      {todos.map((todo) => (\\n        <TodoItem key={todo.id} todo={todo} deleteTodo={deleteTodo} completeTodo={completeTodo} editTodo={editTodo} />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TodoList;\\n\",\n      \"test\": \"\"\n    },\n    \"/components/TodoForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction TodoForm({ addTodo }) {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim() !== '') {\\n      addTodo(text);\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mb-4\\\">\\n      <div className=\\\"flex\\\">\\n        <input\\n          type=\\\"text\\\"\\n          value={text}\\n          onChange={(e) => setText(e.target.value)}\\n          placeholder=\\\"Add a new todo...\\\" // ‚úçÔ∏è‚ú®\\n          className=\\\"flex-grow p-3 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n        />\\n        <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\\\">\\n          <Plus className=\\\"h-5 w-5\\\" />\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default TodoForm;\\n\",\n      \"test\": \"\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoItem.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoForm.js\"\n  ]\n}\n```"},
          ],
        },
      ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
 